<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.lenovo.tripnote.webchat.mapper.BProductCollageMapper" >
  <resultMap id="BaseResultMap" type="com.lenovo.tripnote.webchat.entity.BProductCollage" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="people_num" property="peopleNum" jdbcType="INTEGER" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="collage_price" property="collagePrice" jdbcType="REAL" />
    <result column="collage_limit_time" property="collageLimitTime" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, people_num, product_id, collage_price, collage_limit_time
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollageExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from b_product_collage
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollageExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from b_product_collage
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollageExample" >
    delete from b_product_collage
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollageExample" resultType="java.lang.Integer" >
    select count(*) from b_product_collage
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update b_product_collage
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.peopleNum != null" >
        people_num = #{record.peopleNum,jdbcType=INTEGER},
      </if>
      <if test="record.productId != null" >
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.collagePrice != null" >
        collage_price = #{record.collagePrice,jdbcType=REAL},
      </if>
      <if test="record.collageLimitTime != null" >
        collage_limit_time = #{record.collageLimitTime,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update b_product_collage
    set id = #{record.id,jdbcType=INTEGER},
      people_num = #{record.peopleNum,jdbcType=INTEGER},
      product_id = #{record.productId,jdbcType=INTEGER},
      collage_price = #{record.collagePrice,jdbcType=REAL},
      collage_limit_time = #{record.collageLimitTime,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from b_product_collage
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from b_product_collage
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollage" useGeneratedKeys="true" keyProperty="id" >
    insert into b_product_collage (people_num, product_id, collage_price, 
      collage_limit_time)
    values (#{peopleNum,jdbcType=INTEGER}, #{productId,jdbcType=INTEGER}, #{collagePrice,jdbcType=REAL}, 
      #{collageLimitTime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollage" useGeneratedKeys="true" keyProperty="id" >
    insert into b_product_collage
    <trim prefix="(" suffix=")" suffixOverrides="," >
      people_num,
      product_id,
      collage_price,
      collage_limit_time,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{peopleNum,jdbcType=INTEGER},
      #{productId,jdbcType=INTEGER},
      #{collagePrice,jdbcType=REAL},
      #{collageLimitTime,jdbcType=INTEGER},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollage" >
    update b_product_collage
    <set >
      <if test="peopleNum != null" >
        people_num = #{peopleNum,jdbcType=INTEGER},
      </if>
      <if test="productId != null" >
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="collagePrice != null" >
        collage_price = #{collagePrice,jdbcType=REAL},
      </if>
      <if test="collageLimitTime != null" >
        collage_limit_time = #{collageLimitTime,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lenovo.tripnote.webchat.entity.BProductCollage" >
    update b_product_collage
    set people_num = #{peopleNum,jdbcType=INTEGER},
      product_id = #{productId,jdbcType=INTEGER},
      collage_price = #{collagePrice,jdbcType=REAL},
      collage_limit_time = #{collageLimitTime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>