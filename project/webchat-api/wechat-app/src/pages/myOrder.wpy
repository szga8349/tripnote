<style lang="less">
@import "../styles/variable";

.orderWrap{
  .productList{
    .types{
      display: flex;
      padding: 20rpx 30rpx;
      background: #fff;
      .btn{
        width: 70px;
        height: 30px;
        background: #f2f2f2;
        border-color: #f2f2f2;
        border-radius: 60rpx;
        text-align: center;
        line-height: 30px;
        font-size: 13px;
        &.active{
          background: @primary-color;
          border-color: @primary-color;
          color: #fff;
        }
      }
    }
    .productListBox{
      padding-bottom: 180rpx;
    }
    .item{
      position: relative;
      display: flex;
      margin-top: 20rpx;
      margin-right: 20rpx;
      margin-left: 20rpx;
      .checkStatus{
        margin: 100rpx 20rpx 0 20rpx;
        color: @primary-color;
        .iconfont{
          font-size: 40rpx;
        }
      }
      .detailCon{
        flex: 1;
        display: flex;
        background: #fff;
        .pic{
          position: relative;
          width: 250rpx;
          height: 250rpx;
          .tag{
            position: absolute;
            left: 0;
            top: 0;
            height: 40rpx;
            line-height: 40rpx;
            font-size: 24rpx;
            background: red;
            color: #fff;
            padding: 0 10rpx;
          }
          image{
            width: 250rpx;
            height: 250rpx;
          }
        }
        .info{
          flex: 1;
          margin: 10rpx 20rpx 0;
          .tit{
            height: 76rpx;
            overflow: hidden;
            font-size: 28rpx;
          }

          .des{
            display: flex;
            justify-content: space-between;
            margin-top: 20rpx;
            .leftBox{
              .list{
                line-height: 44rpx;
                color: #999;
                font-size: 24rpx;
              }
            }
            .rightBox{
              text-align: right;
              .price{
                color: @primary-green;
                text{
                  font-size: 40rpx;
                }
              }
            }
          }
          .btnOpt{
            display: flex;
            width: 100%;
            margin-top: 20rpx;
            justify-content: space-between;
            .btn{
              height: 50rpx;
              padding: 0 10rpx;
              background: #fff;
              border: 1px solid @primary-color;
              border-radius: 50rpx;
              line-height: 50rpx;
              text-align: center;
              color: @primary-color;
              &.btnDone{
                background: #fff;
                border-color: #dadada;
                color: #777;
              }
              &.btnWait{
                background: #fff;
                border: 0;
                color: #777;
              }
            }
          }
        }
      }
    }
  }
}


</style>
<template>
  <view class="orderWrap">
    <view class="productList">
      <view class="types">
        <button class="btn {{ tab1BtnChecked == -2 ? 'active' : ''}}" data-index="-2" @tap="tab1BtnFilter">全部</button>
        <button class="btn {{ tab1BtnChecked == 2 ? 'active' : ''}}" data-index="2" @tap="tab1BtnFilter">拼团单</button>
        <button class="btn {{ tab1BtnChecked == 3 ? 'active' : ''}}" data-index="3" @tap="tab1BtnFilter">直购单</button>
        <button class="btn {{ tab1BtnChecked == 1 ? 'active' : ''}}" data-index="1" @tap="tab1BtnFilter">限时单</button>
      </view>

      <view class="productListBox">
        <repeat for="{{productList}}" key="index" index="index" item="item">
          <view class="item" wx:if="{{item.visible}}">
            <view class="detailCon">
              <view class="pic">
                <!-- <view class="tag">{{item.tag}}</view> -->
                <navigator url="/pages/productDetail?id={{item.id}}">
                  <image src="{{item.imageUrl  || '../assets/images/product_img_blank.png'}}"></image>
                </navigator>
              </view>
              <view class="info">
                <view class="tit">
                  <navigator url="/pages/productDetail?id={{item.id}}">{{item.name}}</navigator>
                </view>
                <view class="des">
                  <view class="leftBox">
                    <view class="list">创建时间：{{item.orderCreateTime}}</view>
                    <!-- <view class="list">价格：{{item.soldCount}}</view> -->
                  </view>
                  <view class="rightBox">
                    <view class="price">￥<text>{{item.orderPrice}}</text></view>
                  </view>
                </view>

                <view class="btnOpt">
                  <view class="btn" @tap="orderInfo({{item}})" hover-class="btnHoverClass">订单详情</view>
                  <view class="btn" @tap="orderCancel({{item}})" hover-class="btnHoverClass">取消订单</view>

                  <view class="btn btnDone" wx:if="{{item.orderStatus == 1}}">已支付</view>

                  <view class="btn" hover-class="btnHoverClass" wx:if="{{item.priceType != 2 && item.orderStatus == 0}}" @tap="paymentSubmit({{item}})">立即支付</view>
                  <view class="btn" hover-class="btnHoverClass" wx:if="{{item.priceType == 2 && item.collageStatus == 1 && item.orderStatus == 2}}" @tap="paymentAllSubmit({{item}})">支付余款</view>
                  <view class="btn btnWait" wx:if="{{item.priceType == 2 && item.collageStatus == 0 }}">等待成团</view>
                </view>
              </view>
            </view>
          </view>
        </repeat>

        <view class="noData" wx:if="{{tab1NoData}}">
          <image src="../assets/images/icon_empty.png"></image>
          <text>没有相关数据！</text>
        </view>
      </view>

    </view>
  </view>

  <toast />
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Counter from 'counter' // alias example
  import moduleA from 'module-a' // aliasFields ignore module example
  import testMixin from '../mixins/index'
  import config from '@/utils/config'
  import Util from '@/utils/util'
  import tips from '@/utils/tips'
  import Toast from 'wepy-com-toast';

  

  export default class Product extends wepy.page {
    config = {
      navigationBarTitleText: '我的订单',
      usingComponents: {
        "zan-icon": "./../assets/libs/zanui/icon/index",
        "zan-cell": "./../assets/libs/zanui/cell/index",
        "zan-icon": "./../assets/libs/zanui/icon/index",
        "zan-badge": "./../assets/libs/zanui/badge/index",
        "zan-panel": "./../assets/libs/zanui/panel/index",
        "zan-cell-group": "./../assets/libs/zanui/cell-group/index",
        "zan-tab": "./../assets/libs/zanui/tab/index",
        "zan-card": "./../assets/libs/zanui/card/index"
      }
    }
    components = {
      toast: Toast
    }

    mixins = [testMixin]

    data = {
      tab1BtnChecked: -2,
      tab1NoData: false,
      productList: [],
      selectAll: false,
    }

    computed = {
    }


    statusFilter(){
      this.tab1NoData = true
      let self = this

      this.productList.forEach(item => {
        if(self.tab1BtnChecked == -2){
          item['visible'] = true
          self.tab1NoData = false
        }else{
          if(item.status == self.tab1BtnChecked){
            item['visible'] = true
            self.tab1NoData = false
          }else{
            item['visible'] = false
          }
        }
      })
    }

    // 限时特价&直购 支付
    async orderPayment(payEntity){
      let self = this
      let {
        productId, 
        orderId, 
        price, 
        productName
      } = payEntity

      //orderId = orderId.toLowerCase()
      
      let userInfo = wepy.getStorageSync('userInfo')
      let userKey = wepy.getStorageSync('userKey')
      let openid = userInfo.loginToken

      let res = await wepy.request({
        method: 'post',
        url: config.service.host + '/weixin/wxPay',
        data: {
          openid,
          total_fee: 1,
          product_id: productId,
          out_trade_no: new Date().getTime(),
          body: productName
        },
        header: {
          'content-type': 'application/json'
        }
      })
      if(res.data.code == 1){
        let prepay_id = res.data.data.package.split('=')[1]

        console.log('prepay_id', prepay_id)

        wx.requestPayment({
          timeStamp: res.data.data.timeStamp,
          nonceStr: res.data.data.nonceStr,
          package: res.data.data.package,
          signType: 'MD5',
          paySign: res.data.data.paySign,
          success: function(res){
            if(res.errMsg == 'requestPayment:ok'){
              wx.request({
                method: 'post',
                url: config.service.host + '/token/product/order/doUpdate/' + orderId,
                header: {
                  'authorization': userKey,
                  'content-type': 'application/json'
                },
                data: {
                  status: 1
                },
                success: function(res1){
                  if(res1.data.code == 1){
                    wx.showToast({
                      title: '支付成功',
                      icon: 'success',
                      duration: 1500
                    })
                    self.getOrderList()
                  }
                }
              })
            }
          },
          'fail':function(res){
            // tips.error(res.errMsg)
          },
          'complete':function(res){}
        })
      }
    }

    // 拼团支付余款
    async orderGroupPayRemain(payEntity){
      let self = this

      let {
        productId, 
        orderId, 
        price, 
        productName
      } = payEntity

      //out_trade_no = out_trade_no.toLowerCase()
      let userInfo = wepy.getStorageSync('userInfo')
      let userKey = wepy.getStorageSync('userKey')
      let openid = userInfo.loginToken

      let res = await wepy.request({
        method: 'post',
        url: config.service.host + '/weixin/wxPay',
        data: {
          openid,
          total_fee: 1,
          product_id: productId,
          out_trade_no: new Date().getTime(),
          body: productName
        },
        header: {
          'content-type': 'application/json'
        }
      })
      if(res.data.code == 1){
        let prepay_id = res.data.data.package.split('=')[1]

        console.log('prepay_id', prepay_id)

        wx.requestPayment({
          timeStamp: res.data.data.timeStamp,
          nonceStr: res.data.data.nonceStr,
          package: res.data.data.package,
          signType: 'MD5',
          paySign: res.data.data.paySign,
          success:function(res){
            if(res.errMsg == 'requestPayment:ok'){
              // wx.request({
              //   method: 'post',
              //   url: config.service.host + '/weixin/sentOrderSuccessMessage',
              //   header: {
              //     'content-type': 'application/x-www-form-urlencoded'
              //   },
              //   data: {
              //     form_id: prepay_id
              //   }
              // })

              wx.request({
                method: 'post',
                url: config.service.host + '/token/product/order/collage/doUpdate/'+out_trade_no,
                header: {
                  'content-type': 'application/json',
                  'authorization': userKey,
                },
                data: {
                  // productCollageId: productCollageId,
                  // productId: product_id,
                  payStatus: 1,
                  deposit: total_fee,
                  formId: prepay_id
                },
                success: function(res1){
                  if(res1.data.code == 1){
                    wx.showToast({
                      title: '支付成功',
                      icon: 'success',
                      duration: 2000
                    })
                    self.getOrderList()
                  }
                }
              })
            }else{
              console.log('支付失败')
            }
          },
          'fail':function(res){
            console.log('支付余款fail')
          },
          'complete':function(res){

          }
        })
      }
    }


    methods = {
      orderInfo(item){
        wx.navigateTo({
          url: '/pages/myOrderInfo?orderId=' + item.orderId + '&orderType=' + item.priceType + '&orderPrice=' + item.orderPrice
        })
      },

      async orderCancel(item){
        let isCancel = false
        if(item.priceType != 2 && item.orderStatus == 0){
          let url = this.priceType == 2 ? 
          config.service.host + '/token/product/order/collage/doDelete/' + item.orderId : 
          config.service.host + '/token/product/order/doDelete/' + item.orderId

          const res = await wepy.request({
            url: url,
            header: {
              'authorization': this.$parent.globalData.userKey,
            }
          })

          tips.success('该订单已取消！')
          this.getOrderList()

        }else{
          if(item.priceType != 2){
            this.$invoke('toast', 'show', {
              title: '该订单已经支付完成，如需取消请联系客服！',
              img: '../assets/images/alert.png',
              duration: 2000
            })
          }else{
            this.$invoke('toast', 'show', {
              title: '该订单为拼团订单，如需取消请联系客服！',
              img: '../assets/images/alert.png',
              duration: 2000
            })
          }
        }
      },

      paymentSubmit(item){
        let price = item.priceType == 1 ? item.discountPrice : item.rawPrice
        let payEntity = {
          productId: item.id,
          orderId: item.orderId,
          price: price,
          productName: item.name
        }
        this.orderPayment(payEntity)
      },

      paymentAllSubmit(item){
        let payEntity = {
          productId: item.id,
          orderId: item.orderId,
          price: item.discountPrice,
          productName: item.name
        }

        // return;
        this.orderGroupPayRemain(payEntity)
      },

      tab1BtnFilter(e){
        let sel = parseInt(e.target.dataset.index)
        this.tab1BtnChecked = sel

        this.tab1NoData = true
        let self = this

        this.productList.forEach(item => {
          if(sel == -2){
            item['visible'] = true
            self.tab1NoData = false
          }else{
            if(item.priceType == sel){
              item['visible'] = true
              self.tab1NoData = false
            }else{
              item['visible'] = false
            }
          }
        })
      },
    }

    events = {
      
    }

    formatPrice(item){
      let orderPrice
      if(item.priceType == 2){
        orderPrice = item.collagePrice
      }else if(item.priceType == 1){
        orderPrice = item.discountPrice
      }else if(item.priceType == 2){
        orderPrice = item.rawPrice
      }
      return orderPrice
    }


    async getOrderList(){
      let self = this
      wx.showLoading({
        title: '加载中...',
      })

      const res = await wepy.request({
        url: config.service.host + '/token/product/order/doMy',
        header: {
          'authorization': this.$parent.globalData.userKey,
        }
      })
      let productList = res.data.data.data
      productList.forEach(element => {
        element['checked'] = false
        element['orderCreateTime'] = Util.timestampToTime(element.orderCreateTime)
        element['statusTxt'] = self.formatStatus(element.status)
        element['visible'] = true
        element['tag'] = self.formatType(element.priceType)
        element['orderPrice'] = self.formatPrice(element)
      })
      self.productList = productList

      console.log('list', productList)

      self.statusFilter()

      self.$apply()

      wx.hideLoading()
    }

    onLoad() {
      this.getOrderList()
    }

    onShow(){
      console.log(this.$parent.globalData.userKey)

      // if(!this.$parent.globalData.userKey){
      //   wx.navigateTo({
      //     url: "/pages/login"
      //   })
      // }else{
      //   this.getProductList()
      // }
    }
  }
</script>
