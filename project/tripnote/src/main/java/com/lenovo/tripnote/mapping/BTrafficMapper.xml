<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.lenovo.tripnote.dao.BTrafficMapper" >
  <resultMap id="BaseResultMap" type="com.lenovo.tripnote.entity.BTraffic" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name_cn" property="nameCn" jdbcType="VARCHAR" />
    <result column="name_en" property="nameEn" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="DOUBLE" />
    <result column="supplier" property="supplier" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_user_id" property="createUserId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="end_cityid" property="endCityid" jdbcType="INTEGER" />
    <result column="start_cityid" property="startCityid" jdbcType="INTEGER" />
    <result column="start_name" property="startName" jdbcType="VARCHAR" />
    <result column="end_name" property="endName" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="model" property="model" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name_cn, name_en, price, supplier, create_time, create_user_id, `type`, end_cityid, 
    start_cityid, start_name, end_name, start_time, end_time, model
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.BTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from b_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.BTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from b_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.lenovo.tripnote.entity.BTrafficExample" >
    delete from b_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.lenovo.tripnote.entity.BTrafficExample" resultType="java.lang.Integer" >
    select count(*) from b_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update b_traffic
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.nameCn != null" >
        name_cn = #{record.nameCn,jdbcType=VARCHAR},
      </if>
      <if test="record.nameEn != null" >
        name_en = #{record.nameEn,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DOUBLE},
      </if>
      <if test="record.supplier != null" >
        supplier = #{record.supplier,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        `type` = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.endCityid != null" >
        end_cityid = #{record.endCityid,jdbcType=INTEGER},
      </if>
      <if test="record.startCityid != null" >
        start_cityid = #{record.startCityid,jdbcType=INTEGER},
      </if>
      <if test="record.startName != null" >
        start_name = #{record.startName,jdbcType=VARCHAR},
      </if>
      <if test="record.endName != null" >
        end_name = #{record.endName,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.model != null" >
        model = #{record.model,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update b_traffic
    set id = #{record.id,jdbcType=INTEGER},
      name_cn = #{record.nameCn,jdbcType=VARCHAR},
      name_en = #{record.nameEn,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DOUBLE},
      supplier = #{record.supplier,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      `type` = #{record.type,jdbcType=INTEGER},
      end_cityid = #{record.endCityid,jdbcType=INTEGER},
      start_cityid = #{record.startCityid,jdbcType=INTEGER},
      start_name = #{record.startName,jdbcType=VARCHAR},
      end_name = #{record.endName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      model = #{record.model,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from b_traffic
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from b_traffic
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lenovo.tripnote.entity.BTraffic" useGeneratedKeys="true" keyProperty="id" >
    insert into b_traffic (name_cn, name_en, price, 
      supplier, create_time, create_user_id, 
      `type`, end_cityid, start_cityid, 
      start_name, end_name, start_time, 
      end_time, model)
    values (#{nameCn,jdbcType=VARCHAR}, #{nameEn,jdbcType=VARCHAR}, #{price,jdbcType=DOUBLE}, 
      #{supplier,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER}, #{endCityid,jdbcType=INTEGER}, #{startCityid,jdbcType=INTEGER}, 
      #{startName,jdbcType=VARCHAR}, #{endName,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{model,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lenovo.tripnote.entity.BTraffic" useGeneratedKeys="true" keyProperty="id" >
    insert into b_traffic
    <trim prefix="(" suffix=")" suffixOverrides="," >
      name_cn,
      name_en,
      price,
      supplier,
      create_time,
      create_user_id,
      `type`,
      end_cityid,
      start_cityid,
      start_name,
      end_name,
      start_time,
      end_time,
      model,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{nameCn,jdbcType=VARCHAR},
      #{nameEn,jdbcType=VARCHAR},
      #{price,jdbcType=DOUBLE},
      #{supplier,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP},
      #{createUserId,jdbcType=INTEGER},
      #{type,jdbcType=INTEGER},
      #{endCityid,jdbcType=INTEGER},
      #{startCityid,jdbcType=INTEGER},
      #{startName,jdbcType=VARCHAR},
      #{endName,jdbcType=VARCHAR},
      #{startTime,jdbcType=TIMESTAMP},
      #{endTime,jdbcType=TIMESTAMP},
      #{model,jdbcType=VARCHAR},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lenovo.tripnote.entity.BTraffic" >
    update b_traffic
    <set >
      <if test="nameCn != null" >
        name_cn = #{nameCn,jdbcType=VARCHAR},
      </if>
      <if test="nameEn != null" >
        name_en = #{nameEn,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="supplier != null" >
        supplier = #{supplier,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        `type` = #{type,jdbcType=INTEGER},
      </if>
      <if test="endCityid != null" >
        end_cityid = #{endCityid,jdbcType=INTEGER},
      </if>
      <if test="startCityid != null" >
        start_cityid = #{startCityid,jdbcType=INTEGER},
      </if>
      <if test="startName != null" >
        start_name = #{startName,jdbcType=VARCHAR},
      </if>
      <if test="endName != null" >
        end_name = #{endName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="model != null" >
        model = #{model,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lenovo.tripnote.entity.BTraffic" >
    update b_traffic
    set name_cn = #{nameCn,jdbcType=VARCHAR},
      name_en = #{nameEn,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      supplier = #{supplier,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      `type` = #{type,jdbcType=INTEGER},
      end_cityid = #{endCityid,jdbcType=INTEGER},
      start_cityid = #{startCityid,jdbcType=INTEGER},
      start_name = #{startName,jdbcType=VARCHAR},
      end_name = #{endName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      model = #{model,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>