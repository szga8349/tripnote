<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.lenovo.tripnote.dao.BScenicMapper" >
  <resultMap id="BaseResultMap" type="com.lenovo.tripnote.entity.BScenic" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name_cn" property="nameCn" jdbcType="VARCHAR" />
    <result column="name_en" property="nameEn" jdbcType="VARCHAR" />
    <result column="city_id" property="cityId" jdbcType="INTEGER" />
    <result column="city_name" property="cityName" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="location" property="location" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="ticket" property="ticket" jdbcType="VARCHAR" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="opening_hours" property="openingHours" jdbcType="VARCHAR" />
    <result column="transport" property="transport" jdbcType="VARCHAR" />
    <result column="used_time" property="usedTime" jdbcType="VARCHAR" />
    <result column="top" property="top" jdbcType="INTEGER" />
    <result column="grade" property="grade" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="is_hot" property="isHot" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_user_id" property="createUserId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.lenovo.tripnote.entity.BScenic" extends="BaseResultMap" >
    <result column="introduction" property="introduction" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name_cn, name_en, city_id, city_name, address, `location`, phone, ticket, url, 
    opening_hours, transport, used_time, `top`, grade, `status`, is_hot, create_time, 
    create_user_id, `type`
  </sql>
  <sql id="Blob_Column_List" >
    introduction
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.lenovo.tripnote.entity.BScenicExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b_scenic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.BScenicExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from b_scenic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithBLOBsAndPage" resultMap="ResultMapWithBLOBs" parameterType="com.lenovo.tripnote.entity.BScenicExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b_scenic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.BScenicExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from b_scenic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.lenovo.tripnote.entity.BScenicExample" >
    delete from b_scenic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.lenovo.tripnote.entity.BScenicExample" resultType="java.lang.Integer" >
    select count(*) from b_scenic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update b_scenic
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.nameCn != null" >
        name_cn = #{record.nameCn,jdbcType=VARCHAR},
      </if>
      <if test="record.nameEn != null" >
        name_en = #{record.nameEn,jdbcType=VARCHAR},
      </if>
      <if test="record.cityId != null" >
        city_id = #{record.cityId,jdbcType=INTEGER},
      </if>
      <if test="record.cityName != null" >
        city_name = #{record.cityName,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null" >
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.location != null" >
        `location` = #{record.location,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null" >
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.ticket != null" >
        ticket = #{record.ticket,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null" >
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.openingHours != null" >
        opening_hours = #{record.openingHours,jdbcType=VARCHAR},
      </if>
      <if test="record.transport != null" >
        transport = #{record.transport,jdbcType=VARCHAR},
      </if>
      <if test="record.usedTime != null" >
        used_time = #{record.usedTime,jdbcType=VARCHAR},
      </if>
      <if test="record.top != null" >
        `top` = #{record.top,jdbcType=INTEGER},
      </if>
      <if test="record.grade != null" >
        grade = #{record.grade,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.isHot != null" >
        is_hot = #{record.isHot,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        `type` = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.introduction != null" >
        introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update b_scenic
    set id = #{record.id,jdbcType=INTEGER},
      name_cn = #{record.nameCn,jdbcType=VARCHAR},
      name_en = #{record.nameEn,jdbcType=VARCHAR},
      city_id = #{record.cityId,jdbcType=INTEGER},
      city_name = #{record.cityName,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      `location` = #{record.location,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      ticket = #{record.ticket,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      opening_hours = #{record.openingHours,jdbcType=VARCHAR},
      transport = #{record.transport,jdbcType=VARCHAR},
      used_time = #{record.usedTime,jdbcType=VARCHAR},
      `top` = #{record.top,jdbcType=INTEGER},
      grade = #{record.grade,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=INTEGER},
      is_hot = #{record.isHot,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      `type` = #{record.type,jdbcType=INTEGER},
      introduction = #{record.introduction,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update b_scenic
    set id = #{record.id,jdbcType=INTEGER},
      name_cn = #{record.nameCn,jdbcType=VARCHAR},
      name_en = #{record.nameEn,jdbcType=VARCHAR},
      city_id = #{record.cityId,jdbcType=INTEGER},
      city_name = #{record.cityName,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      `location` = #{record.location,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      ticket = #{record.ticket,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      opening_hours = #{record.openingHours,jdbcType=VARCHAR},
      transport = #{record.transport,jdbcType=VARCHAR},
      used_time = #{record.usedTime,jdbcType=VARCHAR},
      `top` = #{record.top,jdbcType=INTEGER},
      grade = #{record.grade,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=INTEGER},
      is_hot = #{record.isHot,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      `type` = #{record.type,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b_scenic
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from b_scenic
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lenovo.tripnote.entity.BScenic" >
    insert into b_scenic (name_cn, name_en, city_id, 
      city_name, address, `location`, 
      phone, ticket, url, 
      opening_hours, transport, used_time, 
      `top`, grade, `status`, 
      is_hot, create_time, create_user_id, 
      `type`, introduction)
    values (#{nameCn,jdbcType=VARCHAR}, #{nameEn,jdbcType=VARCHAR}, #{cityId,jdbcType=INTEGER}, 
      #{cityName,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{location,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{ticket,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, 
      #{openingHours,jdbcType=VARCHAR}, #{transport,jdbcType=VARCHAR}, #{usedTime,jdbcType=VARCHAR}, 
      #{top,jdbcType=INTEGER}, #{grade,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{isHot,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER}, #{introduction,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lenovo.tripnote.entity.BScenic" >
    insert into b_scenic
    <trim prefix="(" suffix=")" suffixOverrides="," >
      name_cn,
      name_en,
      city_id,
      city_name,
      address,
      `location`,
      phone,
      ticket,
      url,
      opening_hours,
      transport,
      used_time,
      `top`,
      grade,
      `status`,
      is_hot,
      create_time,
      create_user_id,
      `type`,
      introduction,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{nameCn,jdbcType=VARCHAR},
      #{nameEn,jdbcType=VARCHAR},
      #{cityId,jdbcType=INTEGER},
      #{cityName,jdbcType=VARCHAR},
      #{address,jdbcType=VARCHAR},
      #{location,jdbcType=VARCHAR},
      #{phone,jdbcType=VARCHAR},
      #{ticket,jdbcType=VARCHAR},
      #{url,jdbcType=VARCHAR},
      #{openingHours,jdbcType=VARCHAR},
      #{transport,jdbcType=VARCHAR},
      #{usedTime,jdbcType=VARCHAR},
      #{top,jdbcType=INTEGER},
      #{grade,jdbcType=INTEGER},
      #{status,jdbcType=INTEGER},
      #{isHot,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP},
      #{createUserId,jdbcType=INTEGER},
      #{type,jdbcType=INTEGER},
      #{introduction,jdbcType=LONGVARCHAR},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lenovo.tripnote.entity.BScenic" >
    update b_scenic
    <set >
      <if test="nameCn != null" >
        name_cn = #{nameCn,jdbcType=VARCHAR},
      </if>
      <if test="nameEn != null" >
        name_en = #{nameEn,jdbcType=VARCHAR},
      </if>
      <if test="cityId != null" >
        city_id = #{cityId,jdbcType=INTEGER},
      </if>
      <if test="cityName != null" >
        city_name = #{cityName,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="location != null" >
        `location` = #{location,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="ticket != null" >
        ticket = #{ticket,jdbcType=VARCHAR},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="openingHours != null" >
        opening_hours = #{openingHours,jdbcType=VARCHAR},
      </if>
      <if test="transport != null" >
        transport = #{transport,jdbcType=VARCHAR},
      </if>
      <if test="usedTime != null" >
        used_time = #{usedTime,jdbcType=VARCHAR},
      </if>
      <if test="top != null" >
        `top` = #{top,jdbcType=INTEGER},
      </if>
      <if test="grade != null" >
        grade = #{grade,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="isHot != null" >
        is_hot = #{isHot,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        `type` = #{type,jdbcType=INTEGER},
      </if>
      <if test="introduction != null" >
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.lenovo.tripnote.entity.BScenic" >
    update b_scenic
    set name_cn = #{nameCn,jdbcType=VARCHAR},
      name_en = #{nameEn,jdbcType=VARCHAR},
      city_id = #{cityId,jdbcType=INTEGER},
      city_name = #{cityName,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      `location` = #{location,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      ticket = #{ticket,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      opening_hours = #{openingHours,jdbcType=VARCHAR},
      transport = #{transport,jdbcType=VARCHAR},
      used_time = #{usedTime,jdbcType=VARCHAR},
      `top` = #{top,jdbcType=INTEGER},
      grade = #{grade,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      is_hot = #{isHot,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      `type` = #{type,jdbcType=INTEGER},
      introduction = #{introduction,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lenovo.tripnote.entity.BScenic" >
    update b_scenic
    set name_cn = #{nameCn,jdbcType=VARCHAR},
      name_en = #{nameEn,jdbcType=VARCHAR},
      city_id = #{cityId,jdbcType=INTEGER},
      city_name = #{cityName,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      `location` = #{location,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      ticket = #{ticket,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      opening_hours = #{openingHours,jdbcType=VARCHAR},
      transport = #{transport,jdbcType=VARCHAR},
      used_time = #{usedTime,jdbcType=VARCHAR},
      `top` = #{top,jdbcType=INTEGER},
      grade = #{grade,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      is_hot = #{isHot,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      `type` = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>