<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.lenovo.tripnote.dao.TCustomerMapper" >
  <resultMap id="BaseResultMap" type="com.lenovo.tripnote.entity.TCustomer" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="create_user_id" property="createUserId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="phone1" property="phone1" jdbcType="VARCHAR" />
    <result column="phone2" property="phone2" jdbcType="VARCHAR" />
    <result column="phone3" property="phone3" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="qq" property="qq" jdbcType="VARCHAR" />
    <result column="weixin" property="weixin" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, `name`, create_user_id, create_time, `status`, sex, phone1, phone2, phone3, email, 
    qq, weixin
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.TCustomerExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_customer
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.TCustomerExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_customer
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.lenovo.tripnote.entity.TCustomerExample" >
    delete from t_customer
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.lenovo.tripnote.entity.TCustomerExample" resultType="java.lang.Integer" >
    select count(*) from t_customer
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_customer
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null" >
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.sex != null" >
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.phone1 != null" >
        phone1 = #{record.phone1,jdbcType=VARCHAR},
      </if>
      <if test="record.phone2 != null" >
        phone2 = #{record.phone2,jdbcType=VARCHAR},
      </if>
      <if test="record.phone3 != null" >
        phone3 = #{record.phone3,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.qq != null" >
        qq = #{record.qq,jdbcType=VARCHAR},
      </if>
      <if test="record.weixin != null" >
        weixin = #{record.weixin,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_customer
    set id = #{record.id,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      `status` = #{record.status,jdbcType=INTEGER},
      sex = #{record.sex,jdbcType=INTEGER},
      phone1 = #{record.phone1,jdbcType=VARCHAR},
      phone2 = #{record.phone2,jdbcType=VARCHAR},
      phone3 = #{record.phone3,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      qq = #{record.qq,jdbcType=VARCHAR},
      weixin = #{record.weixin,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_customer
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_customer
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lenovo.tripnote.entity.TCustomer" >
    insert into t_customer (`name`, create_user_id, create_time, 
      `status`, sex, phone1, 
      phone2, phone3, email, 
      qq, weixin)
    values (#{name,jdbcType=VARCHAR}, #{createUserId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, #{sex,jdbcType=INTEGER}, #{phone1,jdbcType=VARCHAR}, 
      #{phone2,jdbcType=VARCHAR}, #{phone3,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{qq,jdbcType=VARCHAR}, #{weixin,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lenovo.tripnote.entity.TCustomer" >
    insert into t_customer
    <trim prefix="(" suffix=")" suffixOverrides="," >
      `name`,
      create_user_id,
      create_time,
      `status`,
      sex,
      phone1,
      phone2,
      phone3,
      email,
      qq,
      weixin,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{name,jdbcType=VARCHAR},
      #{createUserId,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP},
      #{status,jdbcType=INTEGER},
      #{sex,jdbcType=INTEGER},
      #{phone1,jdbcType=VARCHAR},
      #{phone2,jdbcType=VARCHAR},
      #{phone3,jdbcType=VARCHAR},
      #{email,jdbcType=VARCHAR},
      #{qq,jdbcType=VARCHAR},
      #{weixin,jdbcType=VARCHAR},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lenovo.tripnote.entity.TCustomer" >
    update t_customer
    <set >
      <if test="name != null" >
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="phone1 != null" >
        phone1 = #{phone1,jdbcType=VARCHAR},
      </if>
      <if test="phone2 != null" >
        phone2 = #{phone2,jdbcType=VARCHAR},
      </if>
      <if test="phone3 != null" >
        phone3 = #{phone3,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="qq != null" >
        qq = #{qq,jdbcType=VARCHAR},
      </if>
      <if test="weixin != null" >
        weixin = #{weixin,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lenovo.tripnote.entity.TCustomer" >
    update t_customer
    set `name` = #{name,jdbcType=VARCHAR},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      `status` = #{status,jdbcType=INTEGER},
      sex = #{sex,jdbcType=INTEGER},
      phone1 = #{phone1,jdbcType=VARCHAR},
      phone2 = #{phone2,jdbcType=VARCHAR},
      phone3 = #{phone3,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      qq = #{qq,jdbcType=VARCHAR},
      weixin = #{weixin,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>