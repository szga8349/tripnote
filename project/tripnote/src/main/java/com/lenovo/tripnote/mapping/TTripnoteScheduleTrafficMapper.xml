<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.lenovo.tripnote.dao.TTripnoteScheduleTrafficMapper" >
  <resultMap id="BaseResultMap" type="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="schedule_id" property="scheduleId" jdbcType="INTEGER" />
    <result column="start_schedule_type" property="startScheduleType" jdbcType="INTEGER" />
    <result column="start_schedule_trip" property="startScheduleTrip" jdbcType="INTEGER" />
    <result column="end_schedule_type" property="endScheduleType" jdbcType="INTEGER" />
    <result column="end_schedule_trip" property="endScheduleTrip" jdbcType="INTEGER" />
    <result column="distance" property="distance" jdbcType="REAL" />
    <result column="spend_time" property="spendTime" jdbcType="BIGINT" />
    <result column="traffic_type" property="trafficType" jdbcType="INTEGER" />
    <result column="arrival_time" property="arrivalTime" jdbcType="TIME" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="shift" property="shift" jdbcType="VARCHAR" />
    <result column="createuser_name" property="createuserName" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIME" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" extends="BaseResultMap" >
    <result column="traffic_guide" property="trafficGuide" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, schedule_id, start_schedule_type, start_schedule_trip, end_schedule_type, end_schedule_trip, 
    distance, spend_time, traffic_type, arrival_time, createtime, create_userid, shift, 
    createuser_name, start_time
  </sql>
  <sql id="Blob_Column_List" >
    traffic_guide
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleWithBLOBsAndPage" resultMap="ResultMapWithBLOBs" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    delete from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" resultType="java.lang.Integer" >
    select count(*) from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_tripnote_schedule_traffic
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.scheduleId != null" >
        schedule_id = #{record.scheduleId,jdbcType=INTEGER},
      </if>
      <if test="record.startScheduleType != null" >
        start_schedule_type = #{record.startScheduleType,jdbcType=INTEGER},
      </if>
      <if test="record.startScheduleTrip != null" >
        start_schedule_trip = #{record.startScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="record.endScheduleType != null" >
        end_schedule_type = #{record.endScheduleType,jdbcType=INTEGER},
      </if>
      <if test="record.endScheduleTrip != null" >
        end_schedule_trip = #{record.endScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="record.distance != null" >
        distance = #{record.distance,jdbcType=REAL},
      </if>
      <if test="record.spendTime != null" >
        spend_time = #{record.spendTime,jdbcType=BIGINT},
      </if>
      <if test="record.trafficType != null" >
        traffic_type = #{record.trafficType,jdbcType=INTEGER},
      </if>
      <if test="record.arrivalTime != null" >
        arrival_time = #{record.arrivalTime,jdbcType=TIME},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserid != null" >
        create_userid = #{record.createUserid,jdbcType=INTEGER},
      </if>
      <if test="record.shift != null" >
        shift = #{record.shift,jdbcType=VARCHAR},
      </if>
      <if test="record.createuserName != null" >
        createuser_name = #{record.createuserName,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIME},
      </if>
      <if test="record.trafficGuide != null" >
        traffic_guide = #{record.trafficGuide,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update t_tripnote_schedule_traffic
    set id = #{record.id,jdbcType=INTEGER},
      schedule_id = #{record.scheduleId,jdbcType=INTEGER},
      start_schedule_type = #{record.startScheduleType,jdbcType=INTEGER},
      start_schedule_trip = #{record.startScheduleTrip,jdbcType=INTEGER},
      end_schedule_type = #{record.endScheduleType,jdbcType=INTEGER},
      end_schedule_trip = #{record.endScheduleTrip,jdbcType=INTEGER},
      distance = #{record.distance,jdbcType=REAL},
      spend_time = #{record.spendTime,jdbcType=BIGINT},
      traffic_type = #{record.trafficType,jdbcType=INTEGER},
      arrival_time = #{record.arrivalTime,jdbcType=TIME},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      create_userid = #{record.createUserid,jdbcType=INTEGER},
      shift = #{record.shift,jdbcType=VARCHAR},
      createuser_name = #{record.createuserName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIME},
      traffic_guide = #{record.trafficGuide,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_tripnote_schedule_traffic
    set id = #{record.id,jdbcType=INTEGER},
      schedule_id = #{record.scheduleId,jdbcType=INTEGER},
      start_schedule_type = #{record.startScheduleType,jdbcType=INTEGER},
      start_schedule_trip = #{record.startScheduleTrip,jdbcType=INTEGER},
      end_schedule_type = #{record.endScheduleType,jdbcType=INTEGER},
      end_schedule_trip = #{record.endScheduleTrip,jdbcType=INTEGER},
      distance = #{record.distance,jdbcType=REAL},
      spend_time = #{record.spendTime,jdbcType=BIGINT},
      traffic_type = #{record.trafficType,jdbcType=INTEGER},
      arrival_time = #{record.arrivalTime,jdbcType=TIME},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      create_userid = #{record.createUserid,jdbcType=INTEGER},
      shift = #{record.shift,jdbcType=VARCHAR},
      createuser_name = #{record.createuserName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIME}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_tripnote_schedule_traffic
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_tripnote_schedule_traffic
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" useGeneratedKeys="true" keyProperty="id" >
    insert into t_tripnote_schedule_traffic (schedule_id, start_schedule_type, start_schedule_trip, 
      end_schedule_type, end_schedule_trip, distance, 
      spend_time, traffic_type, arrival_time, 
      createtime, create_userid, shift, 
      createuser_name, start_time, traffic_guide
      )
    values (#{scheduleId,jdbcType=INTEGER}, #{startScheduleType,jdbcType=INTEGER}, #{startScheduleTrip,jdbcType=INTEGER}, 
      #{endScheduleType,jdbcType=INTEGER}, #{endScheduleTrip,jdbcType=INTEGER}, #{distance,jdbcType=REAL}, 
      #{spendTime,jdbcType=BIGINT}, #{trafficType,jdbcType=INTEGER}, #{arrivalTime,jdbcType=TIME}, 
      #{createtime,jdbcType=TIMESTAMP}, #{createUserid,jdbcType=INTEGER}, #{shift,jdbcType=VARCHAR}, 
      #{createuserName,jdbcType=VARCHAR}, #{startTime,jdbcType=TIME}, #{trafficGuide,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" useGeneratedKeys="true" keyProperty="id" >
    insert into t_tripnote_schedule_traffic
    <trim prefix="(" suffix=")" suffixOverrides="," >
      schedule_id,
      start_schedule_type,
      start_schedule_trip,
      end_schedule_type,
      end_schedule_trip,
      distance,
      spend_time,
      traffic_type,
      arrival_time,
      createtime,
      create_userid,
      shift,
      createuser_name,
      start_time,
      traffic_guide,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{scheduleId,jdbcType=INTEGER},
      #{startScheduleType,jdbcType=INTEGER},
      #{startScheduleTrip,jdbcType=INTEGER},
      #{endScheduleType,jdbcType=INTEGER},
      #{endScheduleTrip,jdbcType=INTEGER},
      #{distance,jdbcType=REAL},
      #{spendTime,jdbcType=BIGINT},
      #{trafficType,jdbcType=INTEGER},
      #{arrivalTime,jdbcType=TIME},
      #{createtime,jdbcType=TIMESTAMP},
      #{createUserid,jdbcType=INTEGER},
      #{shift,jdbcType=VARCHAR},
      #{createuserName,jdbcType=VARCHAR},
      #{startTime,jdbcType=TIME},
      #{trafficGuide,jdbcType=LONGVARCHAR},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" >
    update t_tripnote_schedule_traffic
    <set >
      <if test="scheduleId != null" >
        schedule_id = #{scheduleId,jdbcType=INTEGER},
      </if>
      <if test="startScheduleType != null" >
        start_schedule_type = #{startScheduleType,jdbcType=INTEGER},
      </if>
      <if test="startScheduleTrip != null" >
        start_schedule_trip = #{startScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="endScheduleType != null" >
        end_schedule_type = #{endScheduleType,jdbcType=INTEGER},
      </if>
      <if test="endScheduleTrip != null" >
        end_schedule_trip = #{endScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="distance != null" >
        distance = #{distance,jdbcType=REAL},
      </if>
      <if test="spendTime != null" >
        spend_time = #{spendTime,jdbcType=BIGINT},
      </if>
      <if test="trafficType != null" >
        traffic_type = #{trafficType,jdbcType=INTEGER},
      </if>
      <if test="arrivalTime != null" >
        arrival_time = #{arrivalTime,jdbcType=TIME},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserid != null" >
        create_userid = #{createUserid,jdbcType=INTEGER},
      </if>
      <if test="shift != null" >
        shift = #{shift,jdbcType=VARCHAR},
      </if>
      <if test="createuserName != null" >
        createuser_name = #{createuserName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIME},
      </if>
      <if test="trafficGuide != null" >
        traffic_guide = #{trafficGuide,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" >
    update t_tripnote_schedule_traffic
    set schedule_id = #{scheduleId,jdbcType=INTEGER},
      start_schedule_type = #{startScheduleType,jdbcType=INTEGER},
      start_schedule_trip = #{startScheduleTrip,jdbcType=INTEGER},
      end_schedule_type = #{endScheduleType,jdbcType=INTEGER},
      end_schedule_trip = #{endScheduleTrip,jdbcType=INTEGER},
      distance = #{distance,jdbcType=REAL},
      spend_time = #{spendTime,jdbcType=BIGINT},
      traffic_type = #{trafficType,jdbcType=INTEGER},
      arrival_time = #{arrivalTime,jdbcType=TIME},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      create_userid = #{createUserid,jdbcType=INTEGER},
      shift = #{shift,jdbcType=VARCHAR},
      createuser_name = #{createuserName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIME},
      traffic_guide = #{trafficGuide,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" >
    update t_tripnote_schedule_traffic
    set schedule_id = #{scheduleId,jdbcType=INTEGER},
      start_schedule_type = #{startScheduleType,jdbcType=INTEGER},
      start_schedule_trip = #{startScheduleTrip,jdbcType=INTEGER},
      end_schedule_type = #{endScheduleType,jdbcType=INTEGER},
      end_schedule_trip = #{endScheduleTrip,jdbcType=INTEGER},
      distance = #{distance,jdbcType=REAL},
      spend_time = #{spendTime,jdbcType=BIGINT},
      traffic_type = #{trafficType,jdbcType=INTEGER},
      arrival_time = #{arrivalTime,jdbcType=TIME},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      create_userid = #{createUserid,jdbcType=INTEGER},
      shift = #{shift,jdbcType=VARCHAR},
      createuser_name = #{createuserName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIME}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>