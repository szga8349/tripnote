<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.lenovo.tripnote.dao.TTripnoteScheduleTrafficMapper" >
  <resultMap id="BaseResultMap" type="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="schedule_id" property="scheduleId" jdbcType="INTEGER" />
    <result column="start_schedule_trip" property="startScheduleTrip" jdbcType="INTEGER" />
    <result column="end_schedule_trip" property="endScheduleTrip" jdbcType="INTEGER" />
    <result column="distance" property="distance" jdbcType="REAL" />
    <result column="spend_time" property="spendTime" jdbcType="BIGINT" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="create_userid" property="createUserid" jdbcType="INTEGER" />
    <result column="createuser_name" property="createuserName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, schedule_id, start_schedule_trip, end_schedule_trip, distance, spend_time, createtime, 
    create_userid, createuser_name
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" >
    delete from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTrafficExample" resultType="java.lang.Integer" >
    select count(*) from t_tripnote_schedule_traffic
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_tripnote_schedule_traffic
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.scheduleId != null" >
        schedule_id = #{record.scheduleId,jdbcType=INTEGER},
      </if>
      <if test="record.startScheduleTrip != null" >
        start_schedule_trip = #{record.startScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="record.endScheduleTrip != null" >
        end_schedule_trip = #{record.endScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="record.distance != null" >
        distance = #{record.distance,jdbcType=REAL},
      </if>
      <if test="record.spendTime != null" >
        spend_time = #{record.spendTime,jdbcType=BIGINT},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUserid != null" >
        create_userid = #{record.createUserid,jdbcType=INTEGER},
      </if>
      <if test="record.createuserName != null" >
        createuser_name = #{record.createuserName,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_tripnote_schedule_traffic
    set id = #{record.id,jdbcType=INTEGER},
      schedule_id = #{record.scheduleId,jdbcType=INTEGER},
      start_schedule_trip = #{record.startScheduleTrip,jdbcType=INTEGER},
      end_schedule_trip = #{record.endScheduleTrip,jdbcType=INTEGER},
      distance = #{record.distance,jdbcType=REAL},
      spend_time = #{record.spendTime,jdbcType=BIGINT},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      create_userid = #{record.createUserid,jdbcType=INTEGER},
      createuser_name = #{record.createuserName,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_tripnote_schedule_traffic
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_tripnote_schedule_traffic
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" useGeneratedKeys="true" keyProperty="id">
    insert into t_tripnote_schedule_traffic (schedule_id, start_schedule_trip, end_schedule_trip, 
      distance, spend_time, createtime, 
      create_userid, createuser_name)
    values (#{scheduleId,jdbcType=INTEGER}, #{startScheduleTrip,jdbcType=INTEGER}, #{endScheduleTrip,jdbcType=INTEGER}, 
      #{distance,jdbcType=REAL}, #{spendTime,jdbcType=BIGINT}, #{createtime,jdbcType=TIMESTAMP}, 
      #{createUserid,jdbcType=INTEGER}, #{createuserName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" useGeneratedKeys="true" keyProperty="id">
    insert into t_tripnote_schedule_traffic
    <trim prefix="(" suffix=")" suffixOverrides="," >
      schedule_id,
      start_schedule_trip,
      end_schedule_trip,
      distance,
      spend_time,
      createtime,
      create_userid,
      createuser_name,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{scheduleId,jdbcType=INTEGER},
      #{startScheduleTrip,jdbcType=INTEGER},
      #{endScheduleTrip,jdbcType=INTEGER},
      #{distance,jdbcType=REAL},
      #{spendTime,jdbcType=BIGINT},
      #{createtime,jdbcType=TIMESTAMP},
      #{createUserid,jdbcType=INTEGER},
      #{createuserName,jdbcType=VARCHAR},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" >
    update t_tripnote_schedule_traffic
    <set >
      <if test="scheduleId != null" >
        schedule_id = #{scheduleId,jdbcType=INTEGER},
      </if>
      <if test="startScheduleTrip != null" >
        start_schedule_trip = #{startScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="endScheduleTrip != null" >
        end_schedule_trip = #{endScheduleTrip,jdbcType=INTEGER},
      </if>
      <if test="distance != null" >
        distance = #{distance,jdbcType=REAL},
      </if>
      <if test="spendTime != null" >
        spend_time = #{spendTime,jdbcType=BIGINT},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserid != null" >
        create_userid = #{createUserid,jdbcType=INTEGER},
      </if>
      <if test="createuserName != null" >
        createuser_name = #{createuserName,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lenovo.tripnote.entity.TTripnoteScheduleTraffic" >
    update t_tripnote_schedule_traffic
    set schedule_id = #{scheduleId,jdbcType=INTEGER},
      start_schedule_trip = #{startScheduleTrip,jdbcType=INTEGER},
      end_schedule_trip = #{endScheduleTrip,jdbcType=INTEGER},
      distance = #{distance,jdbcType=REAL},
      spend_time = #{spendTime,jdbcType=BIGINT},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      create_userid = #{createUserid,jdbcType=INTEGER},
      createuser_name = #{createuserName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>